import { Instance } from 'mobx-state-tree';
export declare const Element: import("mobx-state-tree").IModelType<{
    id: import("mobx-state-tree").ISimpleType<string>;
    type: import("mobx-state-tree").IType<string | undefined, string, string>;
    name: import("mobx-state-tree").IType<string | undefined, string, string>;
    x: import("mobx-state-tree").IType<number | undefined, number, number>;
    y: import("mobx-state-tree").IType<number | undefined, number, number>;
    rotation: import("mobx-state-tree").IType<number | undefined, number, number>;
    opacity: import("mobx-state-tree").IType<number | undefined, number, number>;
    blurEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    blurRadius: import("mobx-state-tree").IType<number | undefined, number, number>;
    brightnessEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    brightness: import("mobx-state-tree").IType<number | undefined, number, number>;
    sepiaEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    grayscaleEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    shadowEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    shadowBlur: import("mobx-state-tree").IType<number | undefined, number, number>;
    shadowOffsetX: import("mobx-state-tree").IType<number | undefined, number, number>;
    shadowOffsetY: import("mobx-state-tree").IType<number | undefined, number, number>;
    shadowColor: import("mobx-state-tree").IType<string | undefined, string, string>;
    shadowOpacity: import("mobx-state-tree").IType<number | undefined, number, number>;
    custom: import("mobx-state-tree").IType<any, any, any>;
    visible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    draggable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    selectable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    contentEditable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    styleEditable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    alwaysOnTop: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    showInExport: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
}, {
    readonly locked: boolean;
    readonly page: any;
    readonly store: any;
} & {
    toJSON(): {};
} & {
    clone(attrs: any): {
        id: string;
        type: string;
        name: string;
        x: number;
        y: number;
        rotation: number;
        opacity: number;
        blurEnabled: boolean;
        blurRadius: number;
        brightnessEnabled: boolean;
        brightness: number;
        sepiaEnabled: boolean;
        grayscaleEnabled: boolean;
        shadowEnabled: boolean;
        shadowBlur: number;
        shadowOffsetX: number;
        shadowOffsetY: number;
        shadowColor: string;
        shadowOpacity: number;
        custom: any;
        visible: boolean;
        draggable: boolean;
        selectable: boolean;
        contentEditable: boolean;
        styleEditable: boolean;
        alwaysOnTop: boolean;
        showInExport: boolean;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        readonly locked: boolean;
        readonly page: any;
        readonly store: any;
    } & {
        toJSON(): {};
    } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        id: import("mobx-state-tree").ISimpleType<string>;
        type: import("mobx-state-tree").IType<string | undefined, string, string>;
        name: import("mobx-state-tree").IType<string | undefined, string, string>;
        x: import("mobx-state-tree").IType<number | undefined, number, number>;
        y: import("mobx-state-tree").IType<number | undefined, number, number>;
        rotation: import("mobx-state-tree").IType<number | undefined, number, number>;
        opacity: import("mobx-state-tree").IType<number | undefined, number, number>;
        blurEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        blurRadius: import("mobx-state-tree").IType<number | undefined, number, number>;
        brightnessEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        brightness: import("mobx-state-tree").IType<number | undefined, number, number>;
        sepiaEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        grayscaleEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        shadowEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        shadowBlur: import("mobx-state-tree").IType<number | undefined, number, number>;
        shadowOffsetX: import("mobx-state-tree").IType<number | undefined, number, number>;
        shadowOffsetY: import("mobx-state-tree").IType<number | undefined, number, number>;
        shadowColor: import("mobx-state-tree").IType<string | undefined, string, string>;
        shadowOpacity: import("mobx-state-tree").IType<number | undefined, number, number>;
        custom: import("mobx-state-tree").IType<any, any, any>;
        visible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        draggable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        selectable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        contentEditable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        styleEditable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        alwaysOnTop: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        showInExport: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    }, {
        readonly locked: boolean;
        readonly page: any;
        readonly store: any;
    } & {
        toJSON(): {};
    } & any, import("mobx-state-tree").ModelCreationType<import("mobx-state-tree/dist/internal").ExtractCFromProps<{
        id: import("mobx-state-tree").ISimpleType<string>;
        type: import("mobx-state-tree").IType<string | undefined, string, string>;
        name: import("mobx-state-tree").IType<string | undefined, string, string>;
        x: import("mobx-state-tree").IType<number | undefined, number, number>;
        y: import("mobx-state-tree").IType<number | undefined, number, number>;
        rotation: import("mobx-state-tree").IType<number | undefined, number, number>;
        opacity: import("mobx-state-tree").IType<number | undefined, number, number>;
        blurEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        blurRadius: import("mobx-state-tree").IType<number | undefined, number, number>;
        brightnessEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        brightness: import("mobx-state-tree").IType<number | undefined, number, number>;
        sepiaEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        grayscaleEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        shadowEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        shadowBlur: import("mobx-state-tree").IType<number | undefined, number, number>;
        shadowOffsetX: import("mobx-state-tree").IType<number | undefined, number, number>;
        shadowOffsetY: import("mobx-state-tree").IType<number | undefined, number, number>;
        shadowColor: import("mobx-state-tree").IType<string | undefined, string, string>;
        shadowOpacity: import("mobx-state-tree").IType<number | undefined, number, number>;
        custom: import("mobx-state-tree").IType<any, any, any>;
        visible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        draggable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        selectable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        contentEditable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        styleEditable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        alwaysOnTop: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        showInExport: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    }>>, {}>>;
    set(attrs: any): void;
    moveUp(): void;
    moveTop(): void;
    moveDown(): void;
    moveBottom(): void;
    beforeDestroy(): void;
}, import("mobx-state-tree").ModelCreationType<import("mobx-state-tree/dist/internal").ExtractCFromProps<{
    id: import("mobx-state-tree").ISimpleType<string>;
    type: import("mobx-state-tree").IType<string | undefined, string, string>;
    name: import("mobx-state-tree").IType<string | undefined, string, string>;
    x: import("mobx-state-tree").IType<number | undefined, number, number>;
    y: import("mobx-state-tree").IType<number | undefined, number, number>;
    rotation: import("mobx-state-tree").IType<number | undefined, number, number>;
    opacity: import("mobx-state-tree").IType<number | undefined, number, number>;
    blurEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    blurRadius: import("mobx-state-tree").IType<number | undefined, number, number>;
    brightnessEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    brightness: import("mobx-state-tree").IType<number | undefined, number, number>;
    sepiaEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    grayscaleEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    shadowEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    shadowBlur: import("mobx-state-tree").IType<number | undefined, number, number>;
    shadowOffsetX: import("mobx-state-tree").IType<number | undefined, number, number>;
    shadowOffsetY: import("mobx-state-tree").IType<number | undefined, number, number>;
    shadowColor: import("mobx-state-tree").IType<string | undefined, string, string>;
    shadowOpacity: import("mobx-state-tree").IType<number | undefined, number, number>;
    custom: import("mobx-state-tree").IType<any, any, any>;
    visible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    draggable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    selectable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    contentEditable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    styleEditable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    alwaysOnTop: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    showInExport: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
}>>, {}>;
export declare type ElementType = Instance<typeof Element>;
export declare const TextElement: import("mobx-state-tree").IModelType<{
    id: import("mobx-state-tree").ISimpleType<string>;
    type: import("mobx-state-tree").IType<string | undefined, string, string>;
    name: import("mobx-state-tree").IType<string | undefined, string, string>;
    x: import("mobx-state-tree").IType<number | undefined, number, number>;
    y: import("mobx-state-tree").IType<number | undefined, number, number>;
    rotation: import("mobx-state-tree").IType<number | undefined, number, number>;
    opacity: import("mobx-state-tree").IType<number | undefined, number, number>;
    blurEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    blurRadius: import("mobx-state-tree").IType<number | undefined, number, number>;
    brightnessEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    brightness: import("mobx-state-tree").IType<number | undefined, number, number>;
    sepiaEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    grayscaleEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    shadowEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    shadowBlur: import("mobx-state-tree").IType<number | undefined, number, number>;
    shadowOffsetX: import("mobx-state-tree").IType<number | undefined, number, number>;
    shadowOffsetY: import("mobx-state-tree").IType<number | undefined, number, number>;
    shadowColor: import("mobx-state-tree").IType<string | undefined, string, string>;
    shadowOpacity: import("mobx-state-tree").IType<number | undefined, number, number>;
    custom: import("mobx-state-tree").IType<any, any, any>;
    visible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    draggable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    selectable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    contentEditable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    styleEditable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    alwaysOnTop: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    showInExport: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
} & {
    type: import("mobx-state-tree").IType<string | undefined, string, string>;
    text: import("mobx-state-tree").IType<string | undefined, string, string>;
    placeholder: import("mobx-state-tree").IType<string | undefined, string, string>;
    fontSize: import("mobx-state-tree").IType<number | undefined, number, number>;
    fontFamily: import("mobx-state-tree").IType<string | undefined, string, string>;
    fontStyle: import("mobx-state-tree").IType<string | undefined, string, string>;
    fontWeight: import("mobx-state-tree").IType<string | undefined, string, string>;
    textDecoration: import("mobx-state-tree").IType<string | undefined, string, string>;
    fill: import("mobx-state-tree").IType<string | undefined, string, string>;
    align: import("mobx-state-tree").IType<string | undefined, string, string>;
    width: import("mobx-state-tree").IType<number | undefined, number, number>;
    height: import("mobx-state-tree").IType<number | undefined, number, number>;
    verticalAlign: import("mobx-state-tree").IType<string | undefined, string, string>;
    strokeWidth: import("mobx-state-tree").IType<number | undefined, number, number>;
    stroke: import("mobx-state-tree").IType<string | undefined, string, string>;
    lineHeight: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ITypeUnion<string | number, string | number, string | number>, [undefined]>;
    letterSpacing: import("mobx-state-tree").IType<number | undefined, number, number>;
    _editModeEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
}, {
    readonly locked: boolean;
    readonly page: any;
    readonly store: any;
} & {
    toJSON(): {};
} & {
    clone(attrs: any): {
        id: string;
        type: string;
        name: string;
        x: number;
        y: number;
        rotation: number;
        opacity: number;
        blurEnabled: boolean;
        blurRadius: number;
        brightnessEnabled: boolean;
        brightness: number;
        sepiaEnabled: boolean;
        grayscaleEnabled: boolean;
        shadowEnabled: boolean;
        shadowBlur: number;
        shadowOffsetX: number;
        shadowOffsetY: number;
        shadowColor: string;
        shadowOpacity: number;
        custom: any;
        visible: boolean;
        draggable: boolean;
        selectable: boolean;
        contentEditable: boolean;
        styleEditable: boolean;
        alwaysOnTop: boolean;
        showInExport: boolean;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        readonly locked: boolean;
        readonly page: any;
        readonly store: any;
    } & {
        toJSON(): {};
    } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        id: import("mobx-state-tree").ISimpleType<string>;
        type: import("mobx-state-tree").IType<string | undefined, string, string>;
        name: import("mobx-state-tree").IType<string | undefined, string, string>;
        x: import("mobx-state-tree").IType<number | undefined, number, number>;
        y: import("mobx-state-tree").IType<number | undefined, number, number>;
        rotation: import("mobx-state-tree").IType<number | undefined, number, number>;
        opacity: import("mobx-state-tree").IType<number | undefined, number, number>;
        blurEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        blurRadius: import("mobx-state-tree").IType<number | undefined, number, number>;
        brightnessEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        brightness: import("mobx-state-tree").IType<number | undefined, number, number>;
        sepiaEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        grayscaleEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        shadowEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        shadowBlur: import("mobx-state-tree").IType<number | undefined, number, number>;
        shadowOffsetX: import("mobx-state-tree").IType<number | undefined, number, number>;
        shadowOffsetY: import("mobx-state-tree").IType<number | undefined, number, number>;
        shadowColor: import("mobx-state-tree").IType<string | undefined, string, string>;
        shadowOpacity: import("mobx-state-tree").IType<number | undefined, number, number>;
        custom: import("mobx-state-tree").IType<any, any, any>;
        visible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        draggable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        selectable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        contentEditable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        styleEditable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        alwaysOnTop: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        showInExport: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    }, {
        readonly locked: boolean;
        readonly page: any;
        readonly store: any;
    } & {
        toJSON(): {};
    } & any, import("mobx-state-tree").ModelCreationType<import("mobx-state-tree/dist/internal").ExtractCFromProps<{
        id: import("mobx-state-tree").ISimpleType<string>;
        type: import("mobx-state-tree").IType<string | undefined, string, string>;
        name: import("mobx-state-tree").IType<string | undefined, string, string>;
        x: import("mobx-state-tree").IType<number | undefined, number, number>;
        y: import("mobx-state-tree").IType<number | undefined, number, number>;
        rotation: import("mobx-state-tree").IType<number | undefined, number, number>;
        opacity: import("mobx-state-tree").IType<number | undefined, number, number>;
        blurEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        blurRadius: import("mobx-state-tree").IType<number | undefined, number, number>;
        brightnessEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        brightness: import("mobx-state-tree").IType<number | undefined, number, number>;
        sepiaEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        grayscaleEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        shadowEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        shadowBlur: import("mobx-state-tree").IType<number | undefined, number, number>;
        shadowOffsetX: import("mobx-state-tree").IType<number | undefined, number, number>;
        shadowOffsetY: import("mobx-state-tree").IType<number | undefined, number, number>;
        shadowColor: import("mobx-state-tree").IType<string | undefined, string, string>;
        shadowOpacity: import("mobx-state-tree").IType<number | undefined, number, number>;
        custom: import("mobx-state-tree").IType<any, any, any>;
        visible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        draggable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        selectable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        contentEditable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        styleEditable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        alwaysOnTop: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        showInExport: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    }>>, {}>>;
    set(attrs: any): void;
    moveUp(): void;
    moveTop(): void;
    moveDown(): void;
    moveBottom(): void;
    beforeDestroy(): void;
} & {
    toggleEditMode(editing?: boolean): void;
}, import("mobx-state-tree").ModelCreationType<import("mobx-state-tree/dist/internal").ExtractCFromProps<{
    id: import("mobx-state-tree").ISimpleType<string>;
    type: import("mobx-state-tree").IType<string | undefined, string, string>;
    name: import("mobx-state-tree").IType<string | undefined, string, string>;
    x: import("mobx-state-tree").IType<number | undefined, number, number>;
    y: import("mobx-state-tree").IType<number | undefined, number, number>;
    rotation: import("mobx-state-tree").IType<number | undefined, number, number>;
    opacity: import("mobx-state-tree").IType<number | undefined, number, number>;
    blurEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    blurRadius: import("mobx-state-tree").IType<number | undefined, number, number>;
    brightnessEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    brightness: import("mobx-state-tree").IType<number | undefined, number, number>;
    sepiaEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    grayscaleEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    shadowEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    shadowBlur: import("mobx-state-tree").IType<number | undefined, number, number>;
    shadowOffsetX: import("mobx-state-tree").IType<number | undefined, number, number>;
    shadowOffsetY: import("mobx-state-tree").IType<number | undefined, number, number>;
    shadowColor: import("mobx-state-tree").IType<string | undefined, string, string>;
    shadowOpacity: import("mobx-state-tree").IType<number | undefined, number, number>;
    custom: import("mobx-state-tree").IType<any, any, any>;
    visible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    draggable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    selectable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    contentEditable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    styleEditable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    alwaysOnTop: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    showInExport: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
}>>, {}>;
export declare type TextElementType = Instance<typeof TextElement>;
export declare const ImageElement: import("mobx-state-tree").IModelType<{
    id: import("mobx-state-tree").ISimpleType<string>;
    type: import("mobx-state-tree").IType<string | undefined, string, string>;
    name: import("mobx-state-tree").IType<string | undefined, string, string>;
    x: import("mobx-state-tree").IType<number | undefined, number, number>;
    y: import("mobx-state-tree").IType<number | undefined, number, number>;
    rotation: import("mobx-state-tree").IType<number | undefined, number, number>;
    opacity: import("mobx-state-tree").IType<number | undefined, number, number>;
    blurEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    blurRadius: import("mobx-state-tree").IType<number | undefined, number, number>;
    brightnessEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    brightness: import("mobx-state-tree").IType<number | undefined, number, number>;
    sepiaEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    grayscaleEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    shadowEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    shadowBlur: import("mobx-state-tree").IType<number | undefined, number, number>;
    shadowOffsetX: import("mobx-state-tree").IType<number | undefined, number, number>;
    shadowOffsetY: import("mobx-state-tree").IType<number | undefined, number, number>;
    shadowColor: import("mobx-state-tree").IType<string | undefined, string, string>;
    shadowOpacity: import("mobx-state-tree").IType<number | undefined, number, number>;
    custom: import("mobx-state-tree").IType<any, any, any>;
    visible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    draggable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    selectable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    contentEditable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    styleEditable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    alwaysOnTop: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    showInExport: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
} & {
    type: import("mobx-state-tree").IType<string | undefined, string, string>;
    width: import("mobx-state-tree").IType<number | undefined, number, number>;
    height: import("mobx-state-tree").IType<number | undefined, number, number>;
    src: import("mobx-state-tree").IType<string | undefined, string, string>;
    cropX: import("mobx-state-tree").IType<number | undefined, number, number>;
    cropY: import("mobx-state-tree").IType<number | undefined, number, number>;
    cropWidth: import("mobx-state-tree").IType<number | undefined, number, number>;
    cropHeight: import("mobx-state-tree").IType<number | undefined, number, number>;
    cornerRadius: import("mobx-state-tree").IType<number | undefined, number, number>;
    flipX: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    flipY: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    clipSrc: import("mobx-state-tree").IType<string | undefined, string, string>;
    borderColor: import("mobx-state-tree").IType<string | undefined, string, string>;
    borderSize: import("mobx-state-tree").IType<number | undefined, number, number>;
    _cropModeEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
}, {
    readonly locked: boolean;
    readonly page: any;
    readonly store: any;
} & {
    toJSON(): {};
} & {
    clone(attrs: any): {
        id: string;
        type: string;
        name: string;
        x: number;
        y: number;
        rotation: number;
        opacity: number;
        blurEnabled: boolean;
        blurRadius: number;
        brightnessEnabled: boolean;
        brightness: number;
        sepiaEnabled: boolean;
        grayscaleEnabled: boolean;
        shadowEnabled: boolean;
        shadowBlur: number;
        shadowOffsetX: number;
        shadowOffsetY: number;
        shadowColor: string;
        shadowOpacity: number;
        custom: any;
        visible: boolean;
        draggable: boolean;
        selectable: boolean;
        contentEditable: boolean;
        styleEditable: boolean;
        alwaysOnTop: boolean;
        showInExport: boolean;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        readonly locked: boolean;
        readonly page: any;
        readonly store: any;
    } & {
        toJSON(): {};
    } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        id: import("mobx-state-tree").ISimpleType<string>;
        type: import("mobx-state-tree").IType<string | undefined, string, string>;
        name: import("mobx-state-tree").IType<string | undefined, string, string>;
        x: import("mobx-state-tree").IType<number | undefined, number, number>;
        y: import("mobx-state-tree").IType<number | undefined, number, number>;
        rotation: import("mobx-state-tree").IType<number | undefined, number, number>;
        opacity: import("mobx-state-tree").IType<number | undefined, number, number>;
        blurEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        blurRadius: import("mobx-state-tree").IType<number | undefined, number, number>;
        brightnessEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        brightness: import("mobx-state-tree").IType<number | undefined, number, number>;
        sepiaEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        grayscaleEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        shadowEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        shadowBlur: import("mobx-state-tree").IType<number | undefined, number, number>;
        shadowOffsetX: import("mobx-state-tree").IType<number | undefined, number, number>;
        shadowOffsetY: import("mobx-state-tree").IType<number | undefined, number, number>;
        shadowColor: import("mobx-state-tree").IType<string | undefined, string, string>;
        shadowOpacity: import("mobx-state-tree").IType<number | undefined, number, number>;
        custom: import("mobx-state-tree").IType<any, any, any>;
        visible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        draggable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        selectable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        contentEditable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        styleEditable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        alwaysOnTop: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        showInExport: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    }, {
        readonly locked: boolean;
        readonly page: any;
        readonly store: any;
    } & {
        toJSON(): {};
    } & any, import("mobx-state-tree").ModelCreationType<import("mobx-state-tree/dist/internal").ExtractCFromProps<{
        id: import("mobx-state-tree").ISimpleType<string>;
        type: import("mobx-state-tree").IType<string | undefined, string, string>;
        name: import("mobx-state-tree").IType<string | undefined, string, string>;
        x: import("mobx-state-tree").IType<number | undefined, number, number>;
        y: import("mobx-state-tree").IType<number | undefined, number, number>;
        rotation: import("mobx-state-tree").IType<number | undefined, number, number>;
        opacity: import("mobx-state-tree").IType<number | undefined, number, number>;
        blurEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        blurRadius: import("mobx-state-tree").IType<number | undefined, number, number>;
        brightnessEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        brightness: import("mobx-state-tree").IType<number | undefined, number, number>;
        sepiaEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        grayscaleEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        shadowEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        shadowBlur: import("mobx-state-tree").IType<number | undefined, number, number>;
        shadowOffsetX: import("mobx-state-tree").IType<number | undefined, number, number>;
        shadowOffsetY: import("mobx-state-tree").IType<number | undefined, number, number>;
        shadowColor: import("mobx-state-tree").IType<string | undefined, string, string>;
        shadowOpacity: import("mobx-state-tree").IType<number | undefined, number, number>;
        custom: import("mobx-state-tree").IType<any, any, any>;
        visible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        draggable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        selectable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        contentEditable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        styleEditable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        alwaysOnTop: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        showInExport: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    }>>, {}>>;
    set(attrs: any): void;
    moveUp(): void;
    moveTop(): void;
    moveDown(): void;
    moveBottom(): void;
    beforeDestroy(): void;
} & {
    toggleCropMode(flag?: boolean): void;
}, import("mobx-state-tree").ModelCreationType<import("mobx-state-tree/dist/internal").ExtractCFromProps<{
    id: import("mobx-state-tree").ISimpleType<string>;
    type: import("mobx-state-tree").IType<string | undefined, string, string>;
    name: import("mobx-state-tree").IType<string | undefined, string, string>;
    x: import("mobx-state-tree").IType<number | undefined, number, number>;
    y: import("mobx-state-tree").IType<number | undefined, number, number>;
    rotation: import("mobx-state-tree").IType<number | undefined, number, number>;
    opacity: import("mobx-state-tree").IType<number | undefined, number, number>;
    blurEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    blurRadius: import("mobx-state-tree").IType<number | undefined, number, number>;
    brightnessEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    brightness: import("mobx-state-tree").IType<number | undefined, number, number>;
    sepiaEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    grayscaleEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    shadowEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    shadowBlur: import("mobx-state-tree").IType<number | undefined, number, number>;
    shadowOffsetX: import("mobx-state-tree").IType<number | undefined, number, number>;
    shadowOffsetY: import("mobx-state-tree").IType<number | undefined, number, number>;
    shadowColor: import("mobx-state-tree").IType<string | undefined, string, string>;
    shadowOpacity: import("mobx-state-tree").IType<number | undefined, number, number>;
    custom: import("mobx-state-tree").IType<any, any, any>;
    visible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    draggable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    selectable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    contentEditable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    styleEditable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    alwaysOnTop: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    showInExport: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
}>>, {}>;
export declare type ImageElementType = Instance<typeof ImageElement>;
export declare const SVGElement: import("mobx-state-tree").IModelType<{
    id: import("mobx-state-tree").ISimpleType<string>;
    type: import("mobx-state-tree").IType<string | undefined, string, string>;
    name: import("mobx-state-tree").IType<string | undefined, string, string>;
    x: import("mobx-state-tree").IType<number | undefined, number, number>;
    y: import("mobx-state-tree").IType<number | undefined, number, number>;
    rotation: import("mobx-state-tree").IType<number | undefined, number, number>;
    opacity: import("mobx-state-tree").IType<number | undefined, number, number>;
    blurEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    blurRadius: import("mobx-state-tree").IType<number | undefined, number, number>;
    brightnessEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    brightness: import("mobx-state-tree").IType<number | undefined, number, number>;
    sepiaEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    grayscaleEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    shadowEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    shadowBlur: import("mobx-state-tree").IType<number | undefined, number, number>;
    shadowOffsetX: import("mobx-state-tree").IType<number | undefined, number, number>;
    shadowOffsetY: import("mobx-state-tree").IType<number | undefined, number, number>;
    shadowColor: import("mobx-state-tree").IType<string | undefined, string, string>;
    shadowOpacity: import("mobx-state-tree").IType<number | undefined, number, number>;
    custom: import("mobx-state-tree").IType<any, any, any>;
    visible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    draggable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    selectable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    contentEditable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    styleEditable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    alwaysOnTop: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    showInExport: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
} & {
    type: import("mobx-state-tree").IType<string | undefined, string, string>;
    src: import("mobx-state-tree").IType<string | undefined, string, string>;
    maskSrc: import("mobx-state-tree").IType<string | undefined, string, string>;
    __svgString: import("mobx-state-tree").IType<string | undefined, string, string>;
    cropX: import("mobx-state-tree").IType<number | undefined, number, number>;
    cropY: import("mobx-state-tree").IType<number | undefined, number, number>;
    cropWidth: import("mobx-state-tree").IType<number | undefined, number, number>;
    cropHeight: import("mobx-state-tree").IType<number | undefined, number, number>;
    keepRatio: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    flipX: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    flipY: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    width: import("mobx-state-tree").IType<number | undefined, number, number>;
    height: import("mobx-state-tree").IType<number | undefined, number, number>;
    borderColor: import("mobx-state-tree").IType<string | undefined, string, string>;
    borderSize: import("mobx-state-tree").IType<number | undefined, number, number>;
    colorsReplace: import("mobx-state-tree").IMapType<import("mobx-state-tree").ISimpleType<string>>;
}, {
    readonly locked: boolean;
    readonly page: any;
    readonly store: any;
} & {
    toJSON(): {};
} & {
    clone(attrs: any): {
        id: string;
        type: string;
        name: string;
        x: number;
        y: number;
        rotation: number;
        opacity: number;
        blurEnabled: boolean;
        blurRadius: number;
        brightnessEnabled: boolean;
        brightness: number;
        sepiaEnabled: boolean;
        grayscaleEnabled: boolean;
        shadowEnabled: boolean;
        shadowBlur: number;
        shadowOffsetX: number;
        shadowOffsetY: number;
        shadowColor: string;
        shadowOpacity: number;
        custom: any;
        visible: boolean;
        draggable: boolean;
        selectable: boolean;
        contentEditable: boolean;
        styleEditable: boolean;
        alwaysOnTop: boolean;
        showInExport: boolean;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        readonly locked: boolean;
        readonly page: any;
        readonly store: any;
    } & {
        toJSON(): {};
    } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        id: import("mobx-state-tree").ISimpleType<string>;
        type: import("mobx-state-tree").IType<string | undefined, string, string>;
        name: import("mobx-state-tree").IType<string | undefined, string, string>;
        x: import("mobx-state-tree").IType<number | undefined, number, number>;
        y: import("mobx-state-tree").IType<number | undefined, number, number>;
        rotation: import("mobx-state-tree").IType<number | undefined, number, number>;
        opacity: import("mobx-state-tree").IType<number | undefined, number, number>;
        blurEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        blurRadius: import("mobx-state-tree").IType<number | undefined, number, number>;
        brightnessEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        brightness: import("mobx-state-tree").IType<number | undefined, number, number>;
        sepiaEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        grayscaleEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        shadowEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        shadowBlur: import("mobx-state-tree").IType<number | undefined, number, number>;
        shadowOffsetX: import("mobx-state-tree").IType<number | undefined, number, number>;
        shadowOffsetY: import("mobx-state-tree").IType<number | undefined, number, number>;
        shadowColor: import("mobx-state-tree").IType<string | undefined, string, string>;
        shadowOpacity: import("mobx-state-tree").IType<number | undefined, number, number>;
        custom: import("mobx-state-tree").IType<any, any, any>;
        visible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        draggable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        selectable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        contentEditable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        styleEditable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        alwaysOnTop: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        showInExport: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    }, {
        readonly locked: boolean;
        readonly page: any;
        readonly store: any;
    } & {
        toJSON(): {};
    } & any, import("mobx-state-tree").ModelCreationType<import("mobx-state-tree/dist/internal").ExtractCFromProps<{
        id: import("mobx-state-tree").ISimpleType<string>;
        type: import("mobx-state-tree").IType<string | undefined, string, string>;
        name: import("mobx-state-tree").IType<string | undefined, string, string>;
        x: import("mobx-state-tree").IType<number | undefined, number, number>;
        y: import("mobx-state-tree").IType<number | undefined, number, number>;
        rotation: import("mobx-state-tree").IType<number | undefined, number, number>;
        opacity: import("mobx-state-tree").IType<number | undefined, number, number>;
        blurEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        blurRadius: import("mobx-state-tree").IType<number | undefined, number, number>;
        brightnessEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        brightness: import("mobx-state-tree").IType<number | undefined, number, number>;
        sepiaEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        grayscaleEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        shadowEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        shadowBlur: import("mobx-state-tree").IType<number | undefined, number, number>;
        shadowOffsetX: import("mobx-state-tree").IType<number | undefined, number, number>;
        shadowOffsetY: import("mobx-state-tree").IType<number | undefined, number, number>;
        shadowColor: import("mobx-state-tree").IType<string | undefined, string, string>;
        shadowOpacity: import("mobx-state-tree").IType<number | undefined, number, number>;
        custom: import("mobx-state-tree").IType<any, any, any>;
        visible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        draggable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        selectable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        contentEditable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        styleEditable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        alwaysOnTop: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        showInExport: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    }>>, {}>>;
    set(attrs: any): void;
    moveUp(): void;
    moveTop(): void;
    moveDown(): void;
    moveBottom(): void;
    beforeDestroy(): void;
} & {
    replaceColor(oldColor: any, newColor: any): void;
}, any, {}>;
export declare type SVGElementType = Instance<typeof SVGElement>;
export declare function registerShapeModel(defaultAttributes: any): void;
export declare const Page: import("mobx-state-tree").IModelType<{
    id: import("mobx-state-tree").ISimpleType<string>;
    children: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
    width: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ITypeUnion<number | "auto", number | "auto", number | "auto">, [undefined]>;
    height: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ITypeUnion<number | "auto", number | "auto", number | "auto">, [undefined]>;
    background: import("mobx-state-tree").IType<string | undefined, string, string>;
    bleed: import("mobx-state-tree").IType<number | undefined, number, number>;
    custom: import("mobx-state-tree").IType<any, any, any>;
    _exporting: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
}, {
    readonly store: any;
} & {
    readonly computedWidth: any;
    readonly computedHeight: any;
} & {
    toJSON(): any;
    _forEachElementUp(ids: Array<string>, callback: Function): void;
    _forEachElementDown(ids: Array<string>, callback: Function): false;
} & {
    clone(attrs?: any): any;
    setZIndex(zIndex: any): void;
    set(attrs: any): void;
    select(): void;
    addElement(attrs: any): any;
    canMoveElementsUp(ids: Array<string>): false;
    moveElementsUp(ids: Array<string>): void;
    canMoveElementsTop(ids: Array<string>): any;
    moveElementsTop(ids: Array<string>): void;
    canMoveElementsDown(ids: Array<string>): false;
    moveElementsDown(ids: Array<string>): void;
    canMoveElementsBottom(ids: Array<string>): any;
    moveElementsBottom(ids: Array<string>): void;
    setElementZIndex(id: any, zIndex: any): void;
} & {
    moveElementUp(id: any): void;
    moveElementDown(id: any): void;
    moveElementTop(id: any): void;
    moveElementBottom(id: any): void;
}, import("mobx-state-tree")._NotCustomized, {}>;
export declare type PageType = Instance<typeof Page>;
export declare const Font: import("mobx-state-tree").IModelType<{
    fontFamily: import("mobx-state-tree").ISimpleType<string>;
    url: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    styles: import("mobx-state-tree").IType<any, any, any>;
}, {}, any, import("mobx-state-tree")._NotCustomized>;
export interface ExportOptions {
    pixelRatio?: number;
    ignoreBackground?: boolean;
    pageId?: string;
    includeBleed?: boolean;
    mimeType?: 'image/png' | 'image/jpeg';
    quality?: number;
}
export interface PDFExportOptions extends ExportOptions {
    dpi?: number;
    parallel?: number;
    unit?: 'pt' | 'mm' | 'cm' | 'in';
    pixelUnitRatio?: number;
}
export declare const Store: import("mobx-state-tree").IModelType<{
    role: import("mobx-state-tree").IType<string | undefined, string, string>;
    pages: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
        id: import("mobx-state-tree").ISimpleType<string>;
        children: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
        width: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ITypeUnion<number | "auto", number | "auto", number | "auto">, [undefined]>;
        height: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ITypeUnion<number | "auto", number | "auto", number | "auto">, [undefined]>;
        background: import("mobx-state-tree").IType<string | undefined, string, string>;
        bleed: import("mobx-state-tree").IType<number | undefined, number, number>;
        custom: import("mobx-state-tree").IType<any, any, any>;
        _exporting: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    }, {
        readonly store: any;
    } & {
        readonly computedWidth: any;
        readonly computedHeight: any;
    } & {
        toJSON(): any;
        _forEachElementUp(ids: Array<string>, callback: Function): void;
        _forEachElementDown(ids: Array<string>, callback: Function): false;
    } & {
        clone(attrs?: any): any;
        setZIndex(zIndex: any): void;
        set(attrs: any): void;
        select(): void;
        addElement(attrs: any): any;
        canMoveElementsUp(ids: Array<string>): false;
        moveElementsUp(ids: Array<string>): void;
        canMoveElementsTop(ids: Array<string>): any;
        moveElementsTop(ids: Array<string>): void;
        canMoveElementsDown(ids: Array<string>): false;
        moveElementsDown(ids: Array<string>): void;
        canMoveElementsBottom(ids: Array<string>): any;
        moveElementsBottom(ids: Array<string>): void;
        setElementZIndex(id: any, zIndex: any): void;
    } & {
        moveElementUp(id: any): void;
        moveElementDown(id: any): void;
        moveElementTop(id: any): void;
        moveElementBottom(id: any): void;
    }, import("mobx-state-tree")._NotCustomized, {}>>;
    fonts: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
        fontFamily: import("mobx-state-tree").ISimpleType<string>;
        url: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        styles: import("mobx-state-tree").IType<any, any, any>;
    }, {}, any, import("mobx-state-tree")._NotCustomized>>;
    width: import("mobx-state-tree").IType<number | undefined, number, number>;
    height: import("mobx-state-tree").IType<number | undefined, number, number>;
    scale: import("mobx-state-tree").IType<number | undefined, number, number>;
    scaleToFit: import("mobx-state-tree").IType<number | undefined, number, number>;
    unit: import("mobx-state-tree").IType<string | undefined, string, string>;
    dpi: import("mobx-state-tree").IType<number | undefined, number, number>;
    bleedVisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    rulesVisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    openedSidePanel: import("mobx-state-tree").IType<string | undefined, string, string>;
    selectedElementsIds: import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>;
    history: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
        history: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>;
        undoIdx: import("mobx-state-tree").IType<number | undefined, number, number>;
        targetPath: import("mobx-state-tree").IType<string | undefined, string, string>;
    }, {
        readonly canUndo: boolean;
        readonly canRedo: boolean;
    } & {
        startTransaction(): void;
        endTransaction(skipSave?: boolean | undefined): void;
        ignore(func: any, skipStateReplacement?: boolean): Promise<void>;
        transaction(func: any): Promise<void>;
        requestAddState(state: any): void;
        addUndoState(): void;
        afterCreate(): void;
        clear(): void;
        beforeDestroy(): void;
        undo(): void;
        redo(): void;
        replaceState(): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    _elementsPixelRatio: import("mobx-state-tree").IType<number | undefined, number, number>;
    _activePageId: import("mobx-state-tree").IType<string | undefined, string, string>;
}, {
    readonly _bleedVisible: boolean;
    readonly selectedElements: ({
        id: string;
        type: string;
        name: string;
        x: number;
        y: number;
        rotation: number;
        opacity: number;
        blurEnabled: boolean;
        blurRadius: number;
        brightnessEnabled: boolean;
        brightness: number;
        sepiaEnabled: boolean;
        grayscaleEnabled: boolean;
        shadowEnabled: boolean;
        shadowBlur: number;
        shadowOffsetX: number;
        shadowOffsetY: number;
        shadowColor: string;
        shadowOpacity: number;
        custom: any;
        visible: boolean;
        draggable: boolean;
        selectable: boolean;
        contentEditable: boolean;
        styleEditable: boolean;
        alwaysOnTop: boolean;
        showInExport: boolean;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        readonly locked: boolean;
        readonly page: any;
        readonly store: any;
    } & {
        toJSON(): {};
    } & {
        clone(attrs: any): {
            id: string;
            type: string;
            name: string;
            x: number;
            y: number;
            rotation: number;
            opacity: number;
            blurEnabled: boolean;
            blurRadius: number;
            brightnessEnabled: boolean;
            brightness: number;
            sepiaEnabled: boolean;
            grayscaleEnabled: boolean;
            shadowEnabled: boolean;
            shadowBlur: number;
            shadowOffsetX: number;
            shadowOffsetY: number;
            shadowColor: string;
            shadowOpacity: number;
            custom: any;
            visible: boolean;
            draggable: boolean;
            selectable: boolean;
            contentEditable: boolean;
            styleEditable: boolean;
            alwaysOnTop: boolean;
            showInExport: boolean;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            readonly locked: boolean;
            readonly page: any;
            readonly store: any;
        } & {
            toJSON(): {};
        } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            name: import("mobx-state-tree").IType<string | undefined, string, string>;
            x: import("mobx-state-tree").IType<number | undefined, number, number>;
            y: import("mobx-state-tree").IType<number | undefined, number, number>;
            rotation: import("mobx-state-tree").IType<number | undefined, number, number>;
            opacity: import("mobx-state-tree").IType<number | undefined, number, number>;
            blurEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            blurRadius: import("mobx-state-tree").IType<number | undefined, number, number>;
            brightnessEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            brightness: import("mobx-state-tree").IType<number | undefined, number, number>;
            sepiaEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            grayscaleEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            shadowEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            shadowBlur: import("mobx-state-tree").IType<number | undefined, number, number>;
            shadowOffsetX: import("mobx-state-tree").IType<number | undefined, number, number>;
            shadowOffsetY: import("mobx-state-tree").IType<number | undefined, number, number>;
            shadowColor: import("mobx-state-tree").IType<string | undefined, string, string>;
            shadowOpacity: import("mobx-state-tree").IType<number | undefined, number, number>;
            custom: import("mobx-state-tree").IType<any, any, any>;
            visible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            draggable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            contentEditable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            styleEditable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            alwaysOnTop: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            showInExport: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        }, {
            readonly locked: boolean;
            readonly page: any;
            readonly store: any;
        } & {
            toJSON(): {};
        } & any, import("mobx-state-tree").ModelCreationType<import("mobx-state-tree/dist/internal").ExtractCFromProps<{
            id: import("mobx-state-tree").ISimpleType<string>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            name: import("mobx-state-tree").IType<string | undefined, string, string>;
            x: import("mobx-state-tree").IType<number | undefined, number, number>;
            y: import("mobx-state-tree").IType<number | undefined, number, number>;
            rotation: import("mobx-state-tree").IType<number | undefined, number, number>;
            opacity: import("mobx-state-tree").IType<number | undefined, number, number>;
            blurEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            blurRadius: import("mobx-state-tree").IType<number | undefined, number, number>;
            brightnessEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            brightness: import("mobx-state-tree").IType<number | undefined, number, number>;
            sepiaEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            grayscaleEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            shadowEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            shadowBlur: import("mobx-state-tree").IType<number | undefined, number, number>;
            shadowOffsetX: import("mobx-state-tree").IType<number | undefined, number, number>;
            shadowOffsetY: import("mobx-state-tree").IType<number | undefined, number, number>;
            shadowColor: import("mobx-state-tree").IType<string | undefined, string, string>;
            shadowOpacity: import("mobx-state-tree").IType<number | undefined, number, number>;
            custom: import("mobx-state-tree").IType<any, any, any>;
            visible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            draggable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            contentEditable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            styleEditable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            alwaysOnTop: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            showInExport: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        }>>, {}>>;
        set(attrs: any): void;
        moveUp(): void;
        moveTop(): void;
        moveDown(): void;
        moveBottom(): void;
        beforeDestroy(): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        id: import("mobx-state-tree").ISimpleType<string>;
        type: import("mobx-state-tree").IType<string | undefined, string, string>;
        name: import("mobx-state-tree").IType<string | undefined, string, string>;
        x: import("mobx-state-tree").IType<number | undefined, number, number>;
        y: import("mobx-state-tree").IType<number | undefined, number, number>;
        rotation: import("mobx-state-tree").IType<number | undefined, number, number>;
        opacity: import("mobx-state-tree").IType<number | undefined, number, number>;
        blurEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        blurRadius: import("mobx-state-tree").IType<number | undefined, number, number>;
        brightnessEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        brightness: import("mobx-state-tree").IType<number | undefined, number, number>;
        sepiaEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        grayscaleEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        shadowEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        shadowBlur: import("mobx-state-tree").IType<number | undefined, number, number>;
        shadowOffsetX: import("mobx-state-tree").IType<number | undefined, number, number>;
        shadowOffsetY: import("mobx-state-tree").IType<number | undefined, number, number>;
        shadowColor: import("mobx-state-tree").IType<string | undefined, string, string>;
        shadowOpacity: import("mobx-state-tree").IType<number | undefined, number, number>;
        custom: import("mobx-state-tree").IType<any, any, any>;
        visible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        draggable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        selectable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        contentEditable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        styleEditable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        alwaysOnTop: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        showInExport: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    }, {
        readonly locked: boolean;
        readonly page: any;
        readonly store: any;
    } & {
        toJSON(): {};
    } & {
        clone(attrs: any): {
            id: string;
            type: string;
            name: string;
            x: number;
            y: number;
            rotation: number;
            opacity: number;
            blurEnabled: boolean;
            blurRadius: number;
            brightnessEnabled: boolean;
            brightness: number;
            sepiaEnabled: boolean;
            grayscaleEnabled: boolean;
            shadowEnabled: boolean;
            shadowBlur: number;
            shadowOffsetX: number;
            shadowOffsetY: number;
            shadowColor: string;
            shadowOpacity: number;
            custom: any;
            visible: boolean;
            draggable: boolean;
            selectable: boolean;
            contentEditable: boolean;
            styleEditable: boolean;
            alwaysOnTop: boolean;
            showInExport: boolean;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            readonly locked: boolean;
            readonly page: any;
            readonly store: any;
        } & {
            toJSON(): {};
        } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            name: import("mobx-state-tree").IType<string | undefined, string, string>;
            x: import("mobx-state-tree").IType<number | undefined, number, number>;
            y: import("mobx-state-tree").IType<number | undefined, number, number>;
            rotation: import("mobx-state-tree").IType<number | undefined, number, number>;
            opacity: import("mobx-state-tree").IType<number | undefined, number, number>;
            blurEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            blurRadius: import("mobx-state-tree").IType<number | undefined, number, number>;
            brightnessEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            brightness: import("mobx-state-tree").IType<number | undefined, number, number>;
            sepiaEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            grayscaleEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            shadowEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            shadowBlur: import("mobx-state-tree").IType<number | undefined, number, number>;
            shadowOffsetX: import("mobx-state-tree").IType<number | undefined, number, number>;
            shadowOffsetY: import("mobx-state-tree").IType<number | undefined, number, number>;
            shadowColor: import("mobx-state-tree").IType<string | undefined, string, string>;
            shadowOpacity: import("mobx-state-tree").IType<number | undefined, number, number>;
            custom: import("mobx-state-tree").IType<any, any, any>;
            visible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            draggable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            contentEditable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            styleEditable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            alwaysOnTop: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            showInExport: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        }, {
            readonly locked: boolean;
            readonly page: any;
            readonly store: any;
        } & {
            toJSON(): {};
        } & any, import("mobx-state-tree").ModelCreationType<import("mobx-state-tree/dist/internal").ExtractCFromProps<{
            id: import("mobx-state-tree").ISimpleType<string>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            name: import("mobx-state-tree").IType<string | undefined, string, string>;
            x: import("mobx-state-tree").IType<number | undefined, number, number>;
            y: import("mobx-state-tree").IType<number | undefined, number, number>;
            rotation: import("mobx-state-tree").IType<number | undefined, number, number>;
            opacity: import("mobx-state-tree").IType<number | undefined, number, number>;
            blurEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            blurRadius: import("mobx-state-tree").IType<number | undefined, number, number>;
            brightnessEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            brightness: import("mobx-state-tree").IType<number | undefined, number, number>;
            sepiaEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            grayscaleEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            shadowEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            shadowBlur: import("mobx-state-tree").IType<number | undefined, number, number>;
            shadowOffsetX: import("mobx-state-tree").IType<number | undefined, number, number>;
            shadowOffsetY: import("mobx-state-tree").IType<number | undefined, number, number>;
            shadowColor: import("mobx-state-tree").IType<string | undefined, string, string>;
            shadowOpacity: import("mobx-state-tree").IType<number | undefined, number, number>;
            custom: import("mobx-state-tree").IType<any, any, any>;
            visible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            draggable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            contentEditable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            styleEditable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            alwaysOnTop: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            showInExport: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        }>>, {}>>;
        set(attrs: any): void;
        moveUp(): void;
        moveTop(): void;
        moveDown(): void;
        moveBottom(): void;
        beforeDestroy(): void;
    }, import("mobx-state-tree").ModelCreationType<import("mobx-state-tree/dist/internal").ExtractCFromProps<{
        id: import("mobx-state-tree").ISimpleType<string>;
        type: import("mobx-state-tree").IType<string | undefined, string, string>;
        name: import("mobx-state-tree").IType<string | undefined, string, string>;
        x: import("mobx-state-tree").IType<number | undefined, number, number>;
        y: import("mobx-state-tree").IType<number | undefined, number, number>;
        rotation: import("mobx-state-tree").IType<number | undefined, number, number>;
        opacity: import("mobx-state-tree").IType<number | undefined, number, number>;
        blurEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        blurRadius: import("mobx-state-tree").IType<number | undefined, number, number>;
        brightnessEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        brightness: import("mobx-state-tree").IType<number | undefined, number, number>;
        sepiaEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        grayscaleEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        shadowEnabled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        shadowBlur: import("mobx-state-tree").IType<number | undefined, number, number>;
        shadowOffsetX: import("mobx-state-tree").IType<number | undefined, number, number>;
        shadowOffsetY: import("mobx-state-tree").IType<number | undefined, number, number>;
        shadowColor: import("mobx-state-tree").IType<string | undefined, string, string>;
        shadowOpacity: import("mobx-state-tree").IType<number | undefined, number, number>;
        custom: import("mobx-state-tree").IType<any, any, any>;
        visible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        draggable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        selectable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        contentEditable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        styleEditable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        alwaysOnTop: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        showInExport: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    }>>, {}>>)[];
    readonly activePage: ({
        id: string;
        children: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>>;
        width: number | "auto";
        height: number | "auto";
        background: string;
        bleed: number;
        custom: any;
        _exporting: boolean;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        readonly store: any;
    } & {
        readonly computedWidth: any;
        readonly computedHeight: any;
    } & {
        toJSON(): any;
        _forEachElementUp(ids: Array<string>, callback: Function): void;
        _forEachElementDown(ids: Array<string>, callback: Function): false;
    } & {
        clone(attrs?: any): any;
        setZIndex(zIndex: any): void;
        set(attrs: any): void;
        select(): void;
        addElement(attrs: any): any;
        canMoveElementsUp(ids: Array<string>): false;
        moveElementsUp(ids: Array<string>): void;
        canMoveElementsTop(ids: Array<string>): any;
        moveElementsTop(ids: Array<string>): void;
        canMoveElementsDown(ids: Array<string>): false;
        moveElementsDown(ids: Array<string>): void;
        canMoveElementsBottom(ids: Array<string>): any;
        moveElementsBottom(ids: Array<string>): void;
        setElementZIndex(id: any, zIndex: any): void;
    } & {
        moveElementUp(id: any): void;
        moveElementDown(id: any): void;
        moveElementTop(id: any): void;
        moveElementBottom(id: any): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        id: import("mobx-state-tree").ISimpleType<string>;
        children: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
        width: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ITypeUnion<number | "auto", number | "auto", number | "auto">, [undefined]>;
        height: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ITypeUnion<number | "auto", number | "auto", number | "auto">, [undefined]>;
        background: import("mobx-state-tree").IType<string | undefined, string, string>;
        bleed: import("mobx-state-tree").IType<number | undefined, number, number>;
        custom: import("mobx-state-tree").IType<any, any, any>;
        _exporting: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    }, {
        readonly store: any;
    } & {
        readonly computedWidth: any;
        readonly computedHeight: any;
    } & {
        toJSON(): any;
        _forEachElementUp(ids: Array<string>, callback: Function): void;
        _forEachElementDown(ids: Array<string>, callback: Function): false;
    } & {
        clone(attrs?: any): any;
        setZIndex(zIndex: any): void;
        set(attrs: any): void;
        select(): void;
        addElement(attrs: any): any;
        canMoveElementsUp(ids: Array<string>): false;
        moveElementsUp(ids: Array<string>): void;
        canMoveElementsTop(ids: Array<string>): any;
        moveElementsTop(ids: Array<string>): void;
        canMoveElementsDown(ids: Array<string>): false;
        moveElementsDown(ids: Array<string>): void;
        canMoveElementsBottom(ids: Array<string>): any;
        moveElementsBottom(ids: Array<string>): void;
        setElementZIndex(id: any, zIndex: any): void;
    } & {
        moveElementUp(id: any): void;
        moveElementDown(id: any): void;
        moveElementTop(id: any): void;
        moveElementBottom(id: any): void;
    }, import("mobx-state-tree")._NotCustomized, {}>>) | null;
} & {
    afterCreate(): void;
    setUnit({ unit, dpi }: {
        unit: any;
        dpi: any;
    }): void;
    setRole(role: string): void;
    getElementById(id: string): ElementType | undefined;
    addPage(attrs?: any): {
        id: string;
        children: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>>;
        width: number | "auto";
        height: number | "auto";
        background: string;
        bleed: number;
        custom: any;
        _exporting: boolean;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        readonly store: any;
    } & {
        readonly computedWidth: any;
        readonly computedHeight: any;
    } & {
        toJSON(): any;
        _forEachElementUp(ids: Array<string>, callback: Function): void;
        _forEachElementDown(ids: Array<string>, callback: Function): false;
    } & {
        clone(attrs?: any): any;
        setZIndex(zIndex: any): void;
        set(attrs: any): void;
        select(): void;
        addElement(attrs: any): any;
        canMoveElementsUp(ids: Array<string>): false;
        moveElementsUp(ids: Array<string>): void;
        canMoveElementsTop(ids: Array<string>): any;
        moveElementsTop(ids: Array<string>): void;
        canMoveElementsDown(ids: Array<string>): false;
        moveElementsDown(ids: Array<string>): void;
        canMoveElementsBottom(ids: Array<string>): any;
        moveElementsBottom(ids: Array<string>): void;
        setElementZIndex(id: any, zIndex: any): void;
    } & {
        moveElementUp(id: any): void;
        moveElementDown(id: any): void;
        moveElementTop(id: any): void;
        moveElementBottom(id: any): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        id: import("mobx-state-tree").ISimpleType<string>;
        children: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
        width: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ITypeUnion<number | "auto", number | "auto", number | "auto">, [undefined]>;
        height: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ITypeUnion<number | "auto", number | "auto", number | "auto">, [undefined]>;
        background: import("mobx-state-tree").IType<string | undefined, string, string>;
        bleed: import("mobx-state-tree").IType<number | undefined, number, number>;
        custom: import("mobx-state-tree").IType<any, any, any>;
        _exporting: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    }, {
        readonly store: any;
    } & {
        readonly computedWidth: any;
        readonly computedHeight: any;
    } & {
        toJSON(): any;
        _forEachElementUp(ids: Array<string>, callback: Function): void;
        _forEachElementDown(ids: Array<string>, callback: Function): false;
    } & {
        clone(attrs?: any): any;
        setZIndex(zIndex: any): void;
        set(attrs: any): void;
        select(): void;
        addElement(attrs: any): any;
        canMoveElementsUp(ids: Array<string>): false;
        moveElementsUp(ids: Array<string>): void;
        canMoveElementsTop(ids: Array<string>): any;
        moveElementsTop(ids: Array<string>): void;
        canMoveElementsDown(ids: Array<string>): false;
        moveElementsDown(ids: Array<string>): void;
        canMoveElementsBottom(ids: Array<string>): any;
        moveElementsBottom(ids: Array<string>): void;
        setElementZIndex(id: any, zIndex: any): void;
    } & {
        moveElementUp(id: any): void;
        moveElementDown(id: any): void;
        moveElementTop(id: any): void;
        moveElementBottom(id: any): void;
    }, import("mobx-state-tree")._NotCustomized, {}>>;
    selectPage(id: any): void;
    selectElements(ids: Array<string>): void;
    toggleBleed(bleedVisible?: boolean): void;
    toggleRulers(rulesVisible?: boolean): void;
    openSidePanel(panelName: string): void;
    setScale(scale: number): void;
    _setScaleToFit(scale: number): void;
    setElementsPixelRatio(ratio: number): void;
    setSize(width: number, height: number, doMagic?: boolean): void;
    setPageZIndex(id: any, zIndex: any): void;
    deletePages(ids: Array<string>): void;
    deleteElements(ids: Array<string>): void;
    on(event: any, callback: any): import("mobx-state-tree").IDisposer | undefined;
    toDataURL({ pixelRatio, ignoreBackground, pageId, mimeType, includeBleed, quality, }?: ExportOptions): Promise<string>;
    saveAsImage({ fileName, ...exportProps }?: ExportOptions & {
        fileName?: string | undefined;
    }): Promise<void>;
    _toPDF(exportProps: PDFExportOptions): Promise<any>;
    toPDFDataURL(exportProps: ExportOptions): Promise<any>;
    saveAsPDF({ fileName, ...exportProps }?: ExportOptions & {
        fileName?: string | undefined;
        dpi?: number | undefined;
    }): Promise<void>;
    waitLoading(): Promise<void>;
    toJSON(): {
        width: number;
        height: number;
        fonts: import("mobx-state-tree").ModelSnapshotType<{
            fontFamily: import("mobx-state-tree").ISimpleType<string>;
            url: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            styles: import("mobx-state-tree").IType<any, any, any>;
        }>[];
        pages: {}[];
        unit: string;
        dpi: number;
    };
    loadJSON(json: any, keepHistory?: boolean): void;
    addFont(font: {
        fontFamily: string;
        url: string;
    }): void;
    removeFont(fontFamily: string): void;
    loadFont(fontFamily: any): Promise<void>;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
export declare type StoreType = Instance<typeof Store>;
export interface StoreProps {
    key: string;
    showCredit: boolean;
}
export declare function createStore({ key, showCredit }?: StoreProps): StoreType;
export default createStore;
